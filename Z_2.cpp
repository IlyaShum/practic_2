#include <iostream>
#include <vector>
#include <locale.h>
using namespace std;   

//Объявление функции Euclid, которая принимает два целых числа и возвращает вектор целых чисел
vector<int> Euclid(int num, int modal);

int main() {
    setlocale(LC_ALL, "Rus");   

    //Объявление переменных для хранения числа и модуля
    int c, m;
    cout << "Введите число c: ";
    cin >> c;
    cout << "Введите модуль m: ";
    cin >> m;

    //Вызов функции Euclid с переданными числом и модулем, результат сохраняется в векторе lineX
    vector<int> lineX = Euclid(c, m);
    //Извлечение из вектора lineX второго элемента (d)
    int d = lineX[1];
    //Проверка, являются ли числа взаимнопростыми (первый элемент вектора lineX равен 1)
    if (lineX[0] == 1) {
        //Если d отрицательное, то добавляем модуль m
        if (d < 0) {
            d += m;
        }
        cout << "d = " << d << endl;
    }
    else {
        //Если числа не взаимнопростые, то выводим сообщение об этом
        cout << "d не существует, так как c и m - не взаимно простые числа" << endl;
    }
}

//Определение функции Euclid
vector<int> Euclid(int num, int modal) {
    //Инициализация векторов X и Y
    vector<int> X = { modal, 0 };
    vector<int> Y = { num, 1 };
    //Вектор T используется для хранения промежуточных значений
    vector<int> T(2);
    //Вывод разделителя
    cout << "---------------------" << endl;
    //Вывод начальных значений X и Y
    cout << X[0] << " " << X[1] << " " << endl;
    cout << Y[0] << " " << Y[1] << " " << endl;
    //Объявление переменной для хранения результата деления
    int q;
    //Алгоритм Евклида
    while (Y[0] != 0) {
        q = X[0] / Y[0];    //вычисление целой части от деления
        T[0] = X[0] % Y[0]; //вычисление остатка от деления
        T[1] = X[1] - q * Y[1]; //вычисление нового значения для T[1]
        //Вывод промежуточных результатов
        cout << T[0] << " " << T[1] << " " << q << endl;
        //Обмен значений между X и Y
        X = Y;
        Y = T;
    }
    //Вывод разделителя
    cout << "--------------------" << endl;
    //Возврат результата в векторе X
    return X;
}

