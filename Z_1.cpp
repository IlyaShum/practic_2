#include <iostream>
#include <locale.h>

//Функция для вычисления наибольшего общего делителя (НОД)
int gcd(int a, int b) { //объявление функции для вычисления НОД
    while (b != 0) {    //начало цикла, который будет выполняться до тех пор, пока b не равно 0
        int t = b;  //объявление переменной t и присвоение ей значения b
        b = a % b;  //обновление значения b как остатка от деления a на b
        a = t;  //присвоение a значения t (предыдущего значения b)
    }
    return a;   //возврат значения переменной a из функции
}

//Функция для возведения a в степень n по модулю p
__int64 power(__int64 a, __int64 n, __int64 p) {    //объявление функции для возведения числа a в степень n по модулю p
    __int64 res = 1;  //инициализация переменной res значением 1
    a = a % p;  //обновление a, если оно больше, чем p
    while (n > 0) { //начало цикла, который будет выполняться до тех пор, пока n больше 0
        //Если n нечетное, умножаем результат на a
        if (n & 1)  //проверка на нечетность числа n с помощью побитовой операции И
            res = (res * a) % p;
        //Увеличиваем a в квадрате и уменьшаем n на 1 бит
        n = n >> 1; //уменьшение n вдвое путем сдвига битов вправо
        a = (a * a) % p;
    }
    return res; //возврат значения переменной res из функции 
}

//Функция для проверки простоты числа
bool isPrimeNumber(int n) { //объявление функции для проверки простоты числа
    if (n <= 1)  return false;  //если число меньше или равно 1
    if (n <= 3)  return true;   //если число меньше или равно 3
    //Проверка на четность и деление на 3
    if (n % 2 == 0 || n % 3 == 0) return false;
    //Проверка деления числа на 5 и последующие числа с шагом 6
    for (int i = 5; i * i <= n; i = i + 6)
        //Проверка на деление на i и i+2
        if (n % i == 0 || n % (i + 2) == 0)
            return false;
    return true;
}

//Функция для проверки теоремы Ферма
bool FermatTheorem(int a, int p) {
    //Если a и p не взаимно просты, то вернуть false
    if (gcd(a, p) != 1)
        return false;
    //Если a^(p-1) mod p != 1, то вернуть false
    if (power(a, p - 1, p) != 1)
        return false;
    return true;
}

int main() {
    setlocale(LC_ALL, "rus");  
    int a, x, p;
    std::cout << "Введите a, x, and p: ";
    std::cin >> a >> x >> p;

    //Проверка условий
    if (!isPrimeNumber(p)) {
        std::cout << "p не является простым числом" << std::endl;
        return 0;
    }
    if (!FermatTheorem(a, p)) {
        std::cout << "Теорема Ферма не справедлива для a и p" << std::endl;
        return 0;
    }

    //Вычисление a^x mod p
    __int64 result = power(a, x, p);
    std::cout << "Результат: " << result << std::endl;

    return 0;
}

